/* tslint:disable */
/* eslint-disable */
/**
 * frog-db rest interface
 * A frog-db rest interface generated by oapi-codegen
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: serhii_syrota@knu.ua
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DeleteBody
 */
export interface DeleteBody {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DeleteBody
     */
    'conditions': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface Info
 */
export interface Info {
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    'column': string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    'type': SchemaTypeEnum;
}

export const SchemaTypeEnum = {
    Integer: 'integer',
    Real: 'real',
    Char: 'char',
    String: 'string',
    RealInv: 'realInv',
    Image: 'image'
} as const;

export type SchemaTypeEnum = typeof SchemaTypeEnum[keyof typeof SchemaTypeEnum];

/**
 * 
 * @export
 * @interface SelectBody
 */
export interface SelectBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof SelectBody
     */
    'columns': Array<string>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof SelectBody
     */
    'conditions': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface TableSchema
 */
export interface TableSchema {
    /**
     * 
     * @type {string}
     * @memberof TableSchema
     */
    'tableName'?: string;
    /**
     * 
     * @type {Array<Schema>}
     * @memberof TableSchema
     */
    'schema'?: Array<Schema>;
}
/**
 * 
 * @export
 * @interface UpdateBody
 */
export interface UpdateBody {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBody
     */
    'data': { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBody
     */
    'conditions': { [key: string]: any; };
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create db table
         * @param {TableSchema} tableSchema table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTable: async (tableSchema: TableSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableSchema' is not null or undefined
            assertParamExists('createTable', 'tableSchema', tableSchema)
            const localVarPath = `/table`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tableSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbSchema: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete duplicate rows from table
         * @param {string} name table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDuplicateRows: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteDuplicateRows', 'name', name)
            const localVarPath = `/table/{name}/remove-duplicates`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete rows from table by condition
         * @param {string} name table name
         * @param {{ [key: string]: any; }} requestBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRows: async (name: string, requestBody: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteRows', 'name', name)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('deleteRows', 'requestBody', requestBody)
            const localVarPath = `/table/{name}/delete`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete db table
         * @param {string} name table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteTable', 'name', name)
            const localVarPath = `/delete-table/{name}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * insert rows to table
         * @param {string} name table name
         * @param {Array<{ [key: string]: any; }>} requestBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertRows: async (name: string, requestBody: Array<{ [key: string]: any; }>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('insertRows', 'name', name)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('insertRows', 'requestBody', requestBody)
            const localVarPath = `/table/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * select rows from table
         * @param {string} name table name
         * @param {SelectBody} selectBody select body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRows: async (name: string, selectBody: SelectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('selectRows', 'name', name)
            // verify required parameter 'selectBody' is not null or undefined
            assertParamExists('selectRows', 'selectBody', selectBody)
            const localVarPath = `/table/{name}/select`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selectBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update rows in table
         * @param {string} name table name
         * @param {UpdateBody} updateBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRows: async (name: string, updateBody: UpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateRows', 'name', name)
            // verify required parameter 'updateBody' is not null or undefined
            assertParamExists('updateRows', 'updateBody', updateBody)
            const localVarPath = `/table/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * create db table
         * @param {TableSchema} tableSchema table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTable(tableSchema: TableSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTable(tableSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbSchema(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TableSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbSchema(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete duplicate rows from table
         * @param {string} name table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDuplicateRows(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDuplicateRows(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete rows from table by condition
         * @param {string} name table name
         * @param {{ [key: string]: any; }} requestBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRows(name: string, requestBody: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRows(name, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete db table
         * @param {string} name table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTable(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTable(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * insert rows to table
         * @param {string} name table name
         * @param {Array<{ [key: string]: any; }>} requestBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertRows(name: string, requestBody: Array<{ [key: string]: any; }>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertRows(name, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * select rows from table
         * @param {string} name table name
         * @param {SelectBody} selectBody select body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectRows(name: string, selectBody: SelectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: any; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectRows(name, selectBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update rows in table
         * @param {string} name table name
         * @param {UpdateBody} updateBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRows(name: string, updateBody: UpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRows(name, updateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * create db table
         * @param {TableSchema} tableSchema table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTable(tableSchema: TableSchema, options?: any): AxiosPromise<Info> {
            return localVarFp.createTable(tableSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbSchema(options?: any): AxiosPromise<Array<TableSchema>> {
            return localVarFp.dbSchema(options).then((request) => request(axios, basePath));
        },
        /**
         * delete duplicate rows from table
         * @param {string} name table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDuplicateRows(name: string, options?: any): AxiosPromise<Info> {
            return localVarFp.deleteDuplicateRows(name, options).then((request) => request(axios, basePath));
        },
        /**
         * delete rows from table by condition
         * @param {string} name table name
         * @param {{ [key: string]: any; }} requestBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRows(name: string, requestBody: { [key: string]: any; }, options?: any): AxiosPromise<Info> {
            return localVarFp.deleteRows(name, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete db table
         * @param {string} name table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable(name: string, options?: any): AxiosPromise<Info> {
            return localVarFp.deleteTable(name, options).then((request) => request(axios, basePath));
        },
        /**
         * insert rows to table
         * @param {string} name table name
         * @param {Array<{ [key: string]: any; }>} requestBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertRows(name: string, requestBody: Array<{ [key: string]: any; }>, options?: any): AxiosPromise<Info> {
            return localVarFp.insertRows(name, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * select rows from table
         * @param {string} name table name
         * @param {SelectBody} selectBody select body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectRows(name: string, selectBody: SelectBody, options?: any): AxiosPromise<Array<{ [key: string]: any; }>> {
            return localVarFp.selectRows(name, selectBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update rows in table
         * @param {string} name table name
         * @param {UpdateBody} updateBody column rows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRows(name: string, updateBody: UpdateBody, options?: any): AxiosPromise<Info> {
            return localVarFp.updateRows(name, updateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * create db table
     * @param {TableSchema} tableSchema table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTable(tableSchema: TableSchema, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTable(tableSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dbSchema(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dbSchema(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete duplicate rows from table
     * @param {string} name table name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDuplicateRows(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDuplicateRows(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete rows from table by condition
     * @param {string} name table name
     * @param {{ [key: string]: any; }} requestBody column rows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRows(name: string, requestBody: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRows(name, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete db table
     * @param {string} name table name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTable(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTable(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * insert rows to table
     * @param {string} name table name
     * @param {Array<{ [key: string]: any; }>} requestBody column rows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public insertRows(name: string, requestBody: Array<{ [key: string]: any; }>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).insertRows(name, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * select rows from table
     * @param {string} name table name
     * @param {SelectBody} selectBody select body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectRows(name: string, selectBody: SelectBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).selectRows(name, selectBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update rows in table
     * @param {string} name table name
     * @param {UpdateBody} updateBody column rows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRows(name: string, updateBody: UpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRows(name, updateBody, options).then((request) => request(this.axios, this.basePath));
    }
}


